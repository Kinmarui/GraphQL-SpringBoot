type Link {
    id: ID!
    url: String!
    description: String
    postedBy: User
}

type User {
  id: ID!
  name: String!
  email: String
  password: String
}

input AuthData {
  email: String!
  password: String!
}

type Query {
#  allLinks(filter: LinkFilter, skip: Int = 0, first: Int = 1): [Link]
  allLinks(filter: LinkFilter, skip: Int, first: Int): [Link]
  linkById(id: ID!) : Link
  allUsers: [User]
  userById(id: ID!) : User
}

input LinkFilter {
  description_contains: String
  url_contains: String
}

type SigninPayload {
  token: String
  user: User
}


type Vote {
    id: ID!
    createdAt: DateTime!
    user: User!
    link: Link!
}

type Mutation {
  signinUser(auth: AuthData): SigninPayload
  createUser(name: String!, authProvider: AuthData!): User
  createLink(url: String!, description: String!): Link
  createLinkId(id: String!, url: String!, description: String!, userId: String!): Link
  createVote(linkId: ID, userId: ID): Vote
}

schema {
    query: Query
    mutation: Mutation
}

scalar DateTime
